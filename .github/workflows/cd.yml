name: CD

on:
  pull_request:
    types: [closed]
    branches: [main, dev]

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ${{ vars.AWS_REGION || secrets.AWS_REGION }}

jobs:
  deploy:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    timeout-minutes: 45
    concurrency:
      group: cd-${{ github.ref }}
      cancel-in-progress: true

    env:
      BASE_BRANCH: ${{ github.base_ref }}
      STACK_NAME: ${{ github.base_ref == 'main' && 'prod-ApiStack-AutoReport' || 'dev-ApiStack-AutoReport' }}
      ROLE_TO_ASSUME: ${{ github.base_ref == 'main' && secrets.AWS_ROLE_TO_ASSUME_PROD || secrets.AWS_ROLE_TO_ASSUME_DEV }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node (CDK)
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install Node dependencies
        run: npm ci

      - name: Set up uv
        uses: astral-sh/setup-uv@v3

      - name: Sync Python dependencies
        run: |
          uv python install 3.12
          uv sync --all-groups

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Synthesize
        run: npx cdk synth

      - name: Deploy
        run: npx cdk deploy $STACK_NAME --require-approval never --verbose

      - name: Capture stack outputs
        id: stack_outputs
        run: |
          aws cloudformation describe-stacks \
            --stack-name "$STACK_NAME" \
            --query "Stacks[0].Outputs" \
            --output json > outputs.json
          echo "outputs=$(cat outputs.json)" >> $GITHUB_OUTPUT

      - name: Export useful outputs to env
        run: |
          API_URL=$(jq -r '.[] | select(.OutputKey=="UnifiedApiUrl") | .OutputValue' outputs.json)
          echo "API_URL=$API_URL" >> $GITHUB_ENV
          echo "Resolved API_URL=$API_URL"

      - name: Integration tests
        env:
          API_URL: ${{ env.API_URL }}
        run: uv run pytest -m integration --override-ini addopts= --maxfail=1 --disable-warnings -q

      - name: Upload test logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-logs
          path: |
            .pytest_cache
            outputs.json
          if-no-files-found: warn

      - name: Notify Microsoft Teams on failure
        if: failure()
        env:
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          STACK_NAME: ${{ env.STACK_NAME }}
        run: |
          if [ -z "${TEAMS_WEBHOOK_URL}" ]; then
            echo "No TEAMS_WEBHOOK_URL configured; skipping."
            exit 0
          fi
          SHORT_SHA="${GITHUB_SHA::7}"
          read -r -d '' CARD << EOF
          {
            "@type": "MessageCard",
            "@context": "https://schema.org/extensions",
            "themeColor": "D24D57",
            "summary": "CD failed",
            "title": "❌ CD failed for ${STACK_NAME}",
            "sections": [
              {
                "facts": [
                  { "name": "Branch", "value": "${{ github.base_ref || github.ref_name }}" },
                  { "name": "Actor", "value": "${{ github.actor }}" },
                  { "name": "Commit", "value": "${SHORT_SHA}" }
                ]
              }
            ],
            "potentialAction": [
              {
                "@type": "OpenUri",
                "name": "View Run",
                "targets": [{ "os": "default", "uri": "${RUN_URL}"}]
              }
            ]
          }
          EOF
          curl -H "Content-Type: application/json" -d "${CARD}" "${TEAMS_WEBHOOK_URL}"
